{
  "id": "aniwatch",
  "name": "AniWatch",
  "description": "AniWatch.to streaming provider for Seanime",
  "manifestURI": "https://raw.githubusercontent.com/Shamshoo/aniwatch/main/manifest.json",
  "version": "1.0.0",
  "author": "Shamshoo",
  "type": "online-streaming-provider",
  "language": "javascript",
  "lang": "en",
  "payload": "class Provider {\n  api = \"https://aniwatchtv.to\"\n\n  async search(query) {\n    console.log(\"Searching for:\", query)\n    try {\n      const res = await fetch(`${this.api}/search?keyword=${encodeURIComponent(query)}`)\n      const html = await res.text()\n      console.log(\"Search HTML:\", html.substring(0, 500) + \"...\")\n      \n      const results = []\n      const regex = /<div class=\"film-poster\">\\s*<a href=\"\\/watch\\/([^\"]+)\"[^>]*>\\s*<img[^>]*data-src=\"([^\"]+)\"[^>]*>\\s*<\\/a>[\\s\\S]*?<h3 class=\"film-name\">\\s*<a[^>]*>([^<]+)<\\/a>/g\n      \n      let match\n      while ((match = regex.exec(html)) !== null) {\n        const id = match[1]\n        const thumbnail = match[2]\n        const title = match[3].trim()\n        \n        results.push({\n          id,\n          title,\n          thumbnail\n        })\n      }\n      \n      console.log(\"Search results:\", results)\n      return { results }\n    } catch (error) {\n      console.error(\"Search error:\", error)\n      return { results: [] }\n    }\n  }\n\n  async getMedia(id) {\n    console.log(\"Getting media for ID:\", id)\n    try {\n      const res = await fetch(`${this.api}/watch/${id}`)\n      const html = await res.text()\n      console.log(\"Media HTML:\", html.substring(0, 500) + \"...\")\n      \n      // Extract title\n      const titleMatch = html.match(/<h2[^>]*class=\"film-name\"[^>]*>([^<]+)<\\/h2>/)\n      const title = titleMatch ? titleMatch[1].trim() : \"\"\n      \n      // Extract episodes\n      const episodes = []\n      const episodeRegex = /<a[^>]*data-id=\"([^\"]+)\"[^>]*data-number=\"([^\"]+)\"[^>]*>\\s*(?:<span[^>]*>)?\\s*(?:EP|Episode)\\s*(\\d+)\\s*(?:<\\/span>)?\\s*<\\/a>/g\n      \n      let episodeMatch\n      while ((episodeMatch = episodeRegex.exec(html)) !== null) {\n        const episodeId = episodeMatch[1]\n        const episodeNumber = parseInt(episodeMatch[3], 10)\n        \n        episodes.push({\n          id: episodeId,\n          number: episodeNumber\n        })\n      }\n      \n      // Sort episodes by number\n      episodes.sort((a, b) => a.number - b.number)\n      \n      console.log(\"Media info:\", { title, episodes })\n      return { title, episodes }\n    } catch (error) {\n      console.error(\"Get media error:\", error)\n      return { title: \"\", episodes: [] }\n    }\n  }\n\n  async getEpisode(mediaId, episodeId) {\n    console.log(\"Getting episode:\", { mediaId, episodeId })\n    try {\n      const res = await fetch(`${this.api}/ajax/v2/episode/servers?episodeId=${episodeId}`)\n      const data = await res.json()\n      console.log(\"Episode servers HTML:\", data.html.substring(0, 500) + \"...\")\n      \n      // Extract server data\n      const serverRegex = /<div[^>]*data-id=\"([^\"]+)\"[^>]*>\\s*<a[^>]*>\\s*<span[^>]*>([^<]+)<\\/span>/g\n      const servers = []\n      \n      let serverMatch\n      while ((serverMatch = serverRegex.exec(data.html)) !== null) {\n        const serverId = serverMatch[1]\n        const serverName = serverMatch[2].trim()\n        \n        servers.push({\n          name: serverName,\n          id: serverId\n        })\n      }\n      \n      // Get sources from first server\n      if (servers.length > 0) {\n        return await this.getSource(servers[0].id)\n      }\n      \n      console.log(\"No servers found\")\n      return { sources: [] }\n    } catch (error) {\n      console.error(\"Get episode error:\", error)\n      return { sources: [] }\n    }\n  }\n\n  async getSource(serverId) {\n    console.log(\"Getting source for server ID:\", serverId)\n    try {\n      const res = await fetch(`${this.api}/ajax/v2/episode/sources?id=${serverId}`)\n      const data = await res.json()\n      console.log(\"Source data:\", data)\n      \n      if (data.link) {\n        // Return the link as a source\n        return {\n          sources: [{\n            url: data.link,\n            quality: \"auto\"\n          }]\n        }\n      }\n      \n      return { sources: [] }\n    } catch (error) {\n      console.error(\"Find episode source error:\", error)\n      return { sources: [] }\n    }\n  }\n}\n\nmodule.exports = Provider;"
}
