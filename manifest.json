{
  "id": "aniwatch",
  "name": "AniWatch",
  "description": "AniWatch.to streaming provider for Seanime",
  "manifestURI": "https://raw.githubusercontent.com/Shamshoo/aniwatch/main/manifest.json",
  "version": "1.0.0",
  "author": "Shamshoo",
  "type": "online-streaming-provider",
  "language": "javascript",
  "lang": "en",
  "payload":"class Provider{\napi=\"https://aniwatchtv.to\"\n\nasync search(query){\nconsole.log(\"Searching for:\",query)\ntry{\nconst res=await fetch(`${this.api}/search?keyword=${encodeURIComponent(query)}`)\nconst html=await res.text()\nconsole.log(\"Search HTML:\",html.substring(0,500)+\"...\")\n\nconst results=[]\nconst regex=/<div class=\"film-poster\">\\s*<a href=\"\\/watch\\/([^\"]+)\"[^>]*>\\s*<img[^>]*data-src=\"([^\"]+)\"[^>]*>\\s*<\\/a>[\\s\\S]*?<h3 class=\"film-name\">\\s*<a[^>]*>([^<]+)<\\/a>/g\n\nlet match\nwhile((match=regex.exec(html))!==null){\nconst id=match[1]\nconst thumbnail=match[2]\nconst title=match[3].trim()\n\nresults.push({\nid,\ntitle,\nthumbnail\n})\n}\n\nconsole.log(\"Search results:\",results)\nreturn{results}\n}catch(error){\nconsole.error(\"Search error:\",error)\nreturn{results:[]}\n}\n}\n\nasync getMedia(id){\nconsole.log(\"Getting media for ID:\",id)\ntry{\nconst res=await fetch(`${this.api}/watch/${id}`)\nconst html=await res.text()\nconsole.log(\"Media HTML:\",html.substring(0,500)+\"...\")\n\n// Extract title\nconst titleMatch=html.match(/<h2[^>]*class=\"film-name\"[^>]*>([^<]+)<\\/h2>/)\nconst title=titleMatch?titleMatch[1].trim():\"\"\n\n// Extract episodes\nconst episodes=[]\nconst episodeRegex=/<a[^>]*data-id=\"([^\"]+)\"[^>]*data-number=\"([^\"]+)\"[^>]*>\\s*(?:<span[^>]*>)?\\s*(?:EP|Episode)\\s*(\\d+)\\s*(?:<\\/span>)?\\s*<\\/a>/g\n\nlet episodeMatch\nwhile((episodeMatch=episodeRegex.exec(html))!==null){\nconst episodeId=episodeMatch[1]\nconst episodeNumber=parseInt(episodeMatch[3],10)\n\nepisodes.push({\nid:episodeId,\nnumber:episodeNumber\n})\n}\n\n// Sort episodes by number\nepisodes.sort((a,b)=>a.number-b.number)\n\nconsole.log(\"Media info:\",{title,episodes})\nreturn{title,episodes}\n}catch(error){\nconsole.error(\"Get media error:\",error)\nreturn{title:\"\",episodes:[]}\n}\n}\n\nasync getEpisode(mediaId,episodeId){\nconsole.log(\"Getting episode:\",{mediaId,episodeId})\ntry{\nconst res=await fetch(`${this.api}/ajax/v2/episode/servers?episodeId=${episodeId}`)\nconst data=await res.json()\nconsole.log(\"Episode servers HTML:\",data.html.substring(0,500)+\"...\")\n\n// Extract server data\nconst serverRegex=/<div[^>]*data-id=\"([^\"]+)\"[^>]*>\\s*<a[^>]*>\\s*<span[^>]*>([^<]+)<\\/span>/g\nconst servers=[]\n\nlet serverMatch\nwhile((serverMatch=serverRegex.exec(data.html))!==null){\nconst serverId=serverMatch[1]\nconst serverName=serverMatch[2].trim()\n\nservers.push({\nname:serverName,\nid:serverId\n})\n}\n\n// Get sources from first server\nif(servers.length>0){\nreturn await this.getSource(servers[0].id)\n}\n\nconsole.log(\"No servers found\")\nreturn{sources:[]}\n}catch(error){\nconsole.error(\"Get episode error:\",error)\nreturn{sources:[]}\n}\n}\n\nasync getSource(serverId){\nconsole.log(\"Getting source for server ID:\",serverId)\ntry{\nconst res=await fetch(`${this.api}/ajax/v2/episode/sources?id=${serverId}`)\nconst data=await res.json()\nconsole.log(\"Source data:\",data)\n\nif(data.link){\n// Return the link as a source\nreturn{\nsources:[{\nurl:data.link,\nquality:\"auto\"\n}]\n}\n}\n\nreturn{sources:[]}\n}catch(error){\nconsole.error(\"Find episode source error:\",error)\nreturn{sources:[]}\n}\n}\n}\n\nmodule.exports=Provider;"
}
