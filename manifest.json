{
  "id": "shamshoo-aniwatch-provider",
  "name": "AniWatch",
  "description": "Online anime streaming provider",
  "version": "1.0.1",
  "type": "onlinestream-provider",
  "manifestURI": "https://raw.githubusercontent.com/Shamshoo/aniwatch/refs/heads/main/manifest.json",
  "language": "typescript",
  "author": "Shamshoo",
  "meta": {
    "website": "https://aniwatchtv.to"
  },
  "payload": "class Provider{\napi=\"https://aniwatchtv.to\"\n\nasync search(query){\nconsole.log(\"Searching for:\",query)\ntry{\nconst res=await fetch(`${this.api}/search?keyword=${encodeURIComponent(query)}`)\nconst html=await res.text()\n\nconst results=[]\nconst regex=/\u003cdiv class=\"film-poster\"\u003e\\s*\u003ca href=\"\\/watch\\/([^\"]+)\"[^\u003e]*\u003e\\s*\u003cimg[^\u003e]*data-src=\"([^\"]+)\"[^\u003e]*\u003e\\s*\u003c\\/a\u003e[\\s\\S]*?\u003ch3 class=\"film-name\"\u003e\\s*\u003ca[^\u003e]*\u003e([^\u003c]+)\u003c\\/a\u003e/g\n\nlet match\nwhile((match=regex.exec(html))!==null){\nconst id=match[1]\nconst thumbnail=match[2]\nconst title=match[3].trim()\n\nresults.push({\nid,\ntitle,\nthumbnail\n})\n}\n\nreturn{results}\n}catch(error){\nconsole.error(\"Search error:\",error)\nreturn{results:[]}\n}\n}\n\nasync getMedia(id){\nconsole.log(\"Getting media for ID:\",id)\ntry{\nconst res=await fetch(`${this.api}/watch/${id}`)\nconst html=await res.text()\n\n// Extract title\nconst titleMatch=html.match(/\u003ch2[^\u003e]*class=\"film-name\"[^\u003e]*\u003e([^\u003c]+)\u003c\\/h2\u003e/)\nconst title=titleMatch?titleMatch[1].trim():\"\"\n\n// Extract episodes\nconst episodes=[]\nconst episodeRegex=/\u003ca[^\u003e]*data-id=\"([^\"]+)\"[^\u003e]*data-number=\"([^\"]+)\"[^\u003e]*\u003e\\s*(?:\u003cspan[^\u003e]*\u003e)?\\s*(?:EP|Episode)\\s*(\\d+)\\s*(?:\u003c\\/span\u003e)?\\s*\u003c\\/a\u003e/g\n\nlet episodeMatch\nwhile((episodeMatch=episodeRegex.exec(html))!==null){\nconst episodeId=episodeMatch[1]\nconst episodeNumber=parseInt(episodeMatch[3],10)\n\nepisodes.push({\nid:episodeId,\nnumber:episodeNumber\n})\n}\n\n// Sort episodes by number\nepisodes.sort((a,b)=\u003ea.number-b.number)\n\nreturn{title,episodes}\n}catch(error){\nconsole.error(\"Get media error:\",error)\nreturn{title:\"\",episodes:[]}\n}\n}\n\nasync getEpisode(mediaId,episodeId){\nconsole.log(\"Getting episode:\",{mediaId,episodeId})\ntry{\nconst res=await fetch(`${this.api}/ajax/v2/episode/servers?episodeId=${episodeId}`)\nconst data=await res.json()\n\n// Extract server data\nconst serverRegex=/\u003cdiv[^\u003e]*data-id=\"([^\"]+)\"[^\u003e]*\u003e\\s*\u003ca[^\u003e]*\u003e\\s*\u003cspan[^\u003e]*\u003e([^\u003c]+)\u003c\\/span\u003e/g\nconst servers=[]\n\nlet serverMatch\nwhile((serverMatch=serverRegex.exec(data.html))!==null){\nconst serverId=serverMatch[1]\nconst serverName=serverMatch[2].trim()\n\nservers.push({\nname:serverName,\nid:serverId\n})\n}\n\n// Get sources from first server\nif(servers.length>0){\nreturn await this.getSource(servers[0].id)\n}\n\nconsole.log(\"No servers found\")\nreturn{sources:[]}\n}catch(error){\nconsole.error(\"Get episode error:\",error)\nreturn{sources:[]}\n}\n}\n\nasync getSource(serverId){\nconsole.log(\"Getting source for server ID:\",serverId)\ntry{\nconst res=await fetch(`${this.api}/ajax/v2/episode/sources?id=${serverId}`)\nconst data=await res.json()\n\nif(data.link){\n// Return the link as a source\nreturn{\nsources:[{\nurl:data.link,\nquality:\"auto\"\n}]\n}\n}\n\nreturn{sources:[]}\n}catch(error){\nconsole.error(\"Find episode source error:\",error)\nreturn{sources:[]}\n}\n}\n}"
}
