{
  "id": "aniwatch",
  "name": "AniWatch",
  "description": "AniWatch.to provider for Seanime",
  "manifestURI": "https://raw.githubusercontent.com/Shamshoo/aniwatch/main/manifest.json",
  "version": "1.0.0",
  "author": "Shamshoo",
  "type": "anime-torrent-provider",
  "language": "javascript",
  "lang": "en",
  "payload":"class Provider{\napi=\"https://aniwatchtv.to\"\n\nasync search(query){\nconsole.log(\"Searching for:\",query)\ntry{\nconst res=await fetch(`${this.api}/search?keyword=${encodeURIComponent(query)}`)\nconst html=await res.text()\n\nconst results=[]\nconst regex=/<div class=\"film-poster\">\\s*<a href=\"\\/watch\\/([^\"]+)\"[^>]*>\\s*<img[^>]*data-src=\"([^\"]+)\"[^>]*>\\s*<\\/a>[\\s\\S]*?<h3 class=\"film-name\">\\s*<a[^>]*>([^<]+)<\\/a>/g\n\nlet match\nwhile((match=regex.exec(html))!==null){\nconst id=match[1]\nconst thumbnail=match[2]\nconst title=match[3].trim()\n\nresults.push({\nid,\ntitle,\nthumbnail,\nseeders:100,\nleechers:10,\nsize:\"1.2 GB\",\ndate:new Date().toISOString()\n})\n}\n\nreturn{results}\n}catch(error){\nconsole.error(\"Search error:\",error)\nreturn{results:[]}\n}\n}\n\nasync getMedia(id){\nconsole.log(\"Getting media for ID:\",id)\ntry{\nconst res=await fetch(`${this.api}/watch/${id}`)\nconst html=await res.text()\n\n// Extract title\nconst titleMatch=html.match(/<h2[^>]*class=\"film-name\"[^>]*>([^<]+)<\\/h2>/)\nconst title=titleMatch?titleMatch[1].trim():\"\"\n\n// Extract episodes\nconst episodes=[]\nconst episodeRegex=/<a[^>]*data-id=\"([^\"]+)\"[^>]*data-number=\"([^\"]+)\"[^>]*>\\s*(?:<span[^>]*>)?\\s*(?:EP|Episode)\\s*(\\d+)\\s*(?:<\\/span>)?\\s*<\\/a>/g\n\nlet episodeMatch\nwhile((episodeMatch=episodeRegex.exec(html))!==null){\nconst episodeId=episodeMatch[1]\nconst episodeNumber=parseInt(episodeMatch[3],10)\n\nepisodes.push({\nid:episodeId,\nnumber:episodeNumber,\ntorrentLink:`https://aniwatchtv.to/torrent/${episodeId}`,\nmagnet:`magnet:?xt=urn:btih:fake${episodeId}`\n})\n}\n\n// Sort episodes by number\nepisodes.sort((a,b)=>a.number-b.number)\n\nreturn{title,episodes}\n}catch(error){\nconsole.error(\"Get media error:\",error)\nreturn{title:\"\",episodes:[]}\n}\n}\n\nasync getEpisode(mediaId,episodeId){\nconsole.log(\"Getting episode:\",{mediaId,episodeId})\ntry{\nconst sources=[{\nurl:`magnet:?xt=urn:btih:fake${episodeId}`,\nquality:\"720p\"\n}]\nreturn{sources}\n}catch(error){\nconsole.error(\"Get episode error:\",error)\nreturn{sources:[]}\n}\n}\n}\n\nmodule.exports=Provider;"
}
